%
%NRZ(bits,Amp,CarrierFreq)
%bits - Sinal BinÃ¡rio de Entrada
%Amp - Amplitude do sinal desejado (0 -> Amp)
%CarrierFreq - Frequencia da Portadora.
%
%Retorno:
%FS - Frequencia de Amostragem, Respeitando o Ritmo de Nyquist
%myX - Sinal de retorno codificado com o NRZ.
function [RB,myX,mynX,TB]=NRZ(signal,Amp,CarrierFreq)
	if(nargin == 0)
		fprintf('É necessário mais argumentos.\n');
		return;
	elseif(nargin >3)
		fprintf('Têm argumentos a mais.\n');
		return;
	elseif (nargin == 1)
		fprintf('Assumindo a Amplitude 5 e frequencia da portadora de 100Hz.\n');	
		CarrierFreq=100;
		Amp=5;
	elseif (nargin == 2)
		fprintf('Assumindo a frequencia da portadora de 100Hz.\n');	
		CarrierFreq=100;
    end
		

	%Tempo de Bit do Nosso NRZ
	TB=0.001;

    %Numero de elementos do sinal de entrada
	nbrBits=length(signal);	
	
    %Frequencia Fundamental de Saída, respeitando o Ritmo de Nyquist
	RB=2.2*(1/TB);
    if (RB > CarrierFreq)
        fprintf('A frequencia da portadora é inferior à frequencia de amostragem do sinal amostrado. Não vai ser possível reconstruir com exactidão o sinal.\n'); 
    end

    %Numero de elementos da nossa Base tempo.
    %n=0:1/(nbrBits*RB-1):1;
    n=0:1/((10000*TB)*nbrBits-1):1;
    
    %Nosso conjunto que vai conter o sinal de saÃ­da
	myX= 1:((10000*TB)*nbrBits);
	mynX= 1:((10000*TB)*nbrBits);
	
    %Ciclo que vai criar a onda quadrada
	j = 1;
    for i=1:nbrBits
		for  k=1:10000*TB
			if( signal(i) == 1)
				myX(j)=Amp;
				mynX(j)=0;
				j=j+1;
			else
 				myX(j)=0;
 				mynX(j)=Amp;
 				j=j+1;
            end 
		end
    end

    figure;
    plot(n,myX);
    title('Sinal após condificação NRZ');

end