%
%NRZ(bits,Amp,CarrierFreq)
%bits - Sinal Binário de Entrada
%Amp - Amplitude do sinal desejado (0 -> Amp)
%CarrierFreq - Frequencia da Portadora.
%
%Retorno:
%FS - Frequencia de Amostragem, Respeitando o Ritmo de Nyquist
%myX - Sinal de retorno codificado com o NRZ.
function [myX,mynX,FS,t]=NRZ(signal,Amp,TB,CarrierFreq)
	if(nargin == 0)
		fprintf('É necessário mais argumentos.\n');
		return;
	elseif(nargin >4)
		fprintf('Têm argumentos a mais.\n');
		return;
	elseif (nargin == 2)
		fprintf('Assumindo a Amplitude 5 e frequencia da portadora de 100Hz.\n');	
		CarrierFreq=100;
		Amp=5;
	elseif (nargin == 3)
		fprintf('Assumindo a frequencia da portadora de 100Hz.\n');	
		CarrierFreq=100;
	end
		

	%Tempo de Bit do Nosso NRZ
	%nrzTs=TB;

    %Numero de elementos do sinal de entrada
	nbrBits=length(signal);	
	
    %Frequencia Fundamental de Saída, respeitando o Ritmo de Nyquist
    %FS=2.2*(1/(TB));
    FS=44000;
    if (FS > CarrierFreq)
        fprintf('A frequencia da portadora é inferior à frequencia de amostragem do sinal amostrado. Não vai ser possível reconstruir com exactidão o sinal.\n'); 
    end

    %tamanho do array de tempos da nossa base tempo por bit
	t=0:1/FS:TB;
    
    if( signal(1) == 1)
			myX = ones(length(t)).*Amp;
			mynX = mynX,zeros(length(t));
		else
 			myX = zeros(length(t));
 			mynX = ones(length(t)).*Amp;
 	end 

    %Ciclo que vai criar a onda quadrada
	k=1;
	for i=2:nbrBits
		if( signal(i) == 1)
				myX = [myX ones(length(t)).*Amp];
				mynX = [mynX,zeros(length(t))];
			else
 				myX = [myX zeros(length(t))];
 				mynX = [mynX,(ones(length(t)).*Amp);
 		end 
    end
end