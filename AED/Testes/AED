------------------------------------------------------------------------
Semestre de Verao 2007/08 Teste Final, Epoca especial (2h30m)
------------------------------------------------------------------------
I - Notação O
* A insercao num amontoado binario tem custo O(log(n)), contudo a 
remocao tem custo O(n).
* Insertion SORT
* Recorrencia
* Inserção em Heap

II - 
* Pesquisa Binária
* Listas Ligadas (Rotacao)
* HashTable 
* Arvores Binaria
------------------------------------------------------------------------
Semestre de Verao 2007/08 Teste Final, segunda epoca
------------------------------------------------------------------------
I - 
* Heaps vs árvores Binárias
* B-Tree:  A inserção 
* quick-sort vs merge-sort
* Head: remoção 

II - 
* Pesquisa
* Lista
* Árvore Binária

------------------------------------------------------------------------
Semestre de Verao 2007/08 Teste Final, primeira epoca
------------------------------------------------------------------------
I -
* Heap vs Árvores Binárias
* B-Tree inserção
* Hash-Table vs Arrays Ordenados vs Arvores Binárias
* selection sort vs insertion sort

II - 
* Heap
* Heap  + O
* Rodar Nó
* HashTable
* Arvore Binaria

------------------------------------------------------------------------
Semestre de Inverno 2008/09 Teste Final, epoca especial
------------------------------------------------------------------------
I - 
* O
* B-TREE

II - 
* Pesquisa Binária
* Heap
* HashTable
* Arvore Binaria

------------------------------------------------------------------------
Semestre de Inverno 2008/09 Teste final, segunda epoca
------------------------------------------------------------------------
I - 
* Algoritmos de Ordenação e O
* B-Tree

II - 
* Pesquisa Binária
* Heap
* Hash
* Arvore Binária

------------------------------------------------------------------------
Semestre de Inverno 2008/09 Teste final, primeira epoca
------------------------------------------------------------------------
I - 
* O Notation (provas)
* Algorimo
* B-TREE

II - 
* Pesquisa Binária
* Heap
* HashTable
* Arvore Binaria

------------------------------------------------------------------------
------------------------------------------------------------------------
public static unique(int[] v, int len){
 int i=0;
 for(int j=0;j<len;+jj){if (v[j]!=v[j-1]) {v[i++]=v[j]}}
 return i;
}
public int potencia(int a,int n){
 if (n == 0) return 1;
 int x=potencia(a,n/2);
 return (n%2 != 0)?a*x*x:x*x;
}
public static int lowerbound(int[] v, int l, int r, int key){
 int mid;
 while (l<=r){
   mid=l + (r-l)/2;
   if(v[mid] >=val)
     r=mid-1;
   else
     l=mid+1;
 }
 return l;
}
------------------------------------------------------------------------
------------------------------------------------------------------------
Sorting Algorithms
* Insertion Sort
* Bubble Sort
* Selection Sort
* Merge Sort
* QuickSort
* Binary Search
* LowerBound
* 



